"use strict";const e={black:[30,40],red:[31,41],magenta:[35,45],yellow:[33,43],green:[32,42],brightRed:[91,40],brightGreen:[92,42],brightYellow:[93,43]};function t(t="",n,s){const o="["+n(e)[0]+"m",r=s?s(e)[1]:null,l=r?"["+r+"m":"";return`[39m${o}${l}${t}${l?"[39m[49m":"[39m"}`}const n=(e="",n)=>t(e,(e=>e.red),n),s=(e="",n)=>t(e,(e=>e.magenta),n),o=(e="",n)=>t(e,(e=>e.yellow),n);function r(e){return(...t)=>{var r;const[l,i]=[n(e.split(":").slice(0,1).pop()),s(e.split(":").slice(1).join(":"))];(null===(r=process.env.DEBUG)||void 0===r?void 0:r.includes("v-press-plus"))&&console.error(`${l}${o(":")}${i}${o("->")} `,...t)}}let l=r("v-press-plus:calcTemplateBlock");function i(e,t,n){e.line=n;const s=e.push("html_block","",0);return s.map=[t,n],s.content=e.getLines(t,n,e.blkIndent,!0),!0}let a=r("v-press-plus:slot-tokens");function c(e,t,n,s,o){const r=[...t.interior.matchAll(/<template.*?[^/]>/gs)].map((e=>e[0])).filter((e=>e.includes("md-slot")));a('this tag\'s interior does have "md-slot" content'),a(`there are ${r.length} template tags with md-slot set`);let c=r.reduce(((e,t)=>(e.push(function(e,t,n){const s=e.split("\n"),o=s.findIndex((e=>e.includes(t)))+n+1,r=s.slice(o-n).findIndex((e=>e.includes("</template")))+o+1;return l("Evaluating template block: ",{lines:`${n} to ${n+s.length}`,openTag:t,start:o,end:r}),[o,r]}(n,t,s)),e)),[]);a("line number boundaries for md-slot tags:",c);let u=s;return c.forEach(((t,n)=>{const[s,r]=t;i(e,u,s-1),a(`added block token from ${u} to ${s-1}`),n===c.length-1&&(i(e,r+1,o),a(`added block token from ${r+1} to ${o}; to close out md-slots`)),u=r+1})),!0}const u=r("v-press-plus");var d=new RegExp("^(?:<[A-Za-z][A-Za-z0-9\\-]*(?:\\s+[a-zA-Z_:][a-zA-Z0-9:._-]*(?:\\s*=\\s*(?:[^\"'=<>`\\x00-\\x20]+|'[^']*'|\"[^\"]*\"))?)*\\s*\\/?>|<\\/[A-Za-z][A-Za-z0-9\\-]*\\s*>)"),p=["address","article","aside","base","basefont","blockquote","body","caption","center","col","colgroup","dd","details","dialog","dir","div","dl","dt","fieldset","figcaption","figure","footer","form","frame","frameset","h1","h2","h3","h4","h5","h6","head","header","hr","html","iframe","legend","li","link","main","menu","menuitem","meta","nav","noframes","ol","optgroup","option","p","param","section","source","summary","table","tbody","td","tfoot","th","thead","title","tr","track","ul"];const m=/^<\/\w+/s,g=[[/^<(script|pre|style)(?=(\s|>|$))/i,/<\/(script|pre|style)>/i,!0],[/^<!--/,/-->/,!0],[/^<\?/,/\?>/,!0],[/^<![A-Z]/,/>/,!0],[/^<!\[CDATA\[/,/\]\]>/,!0],[/^<[A-Z]/,/>/,!0],[/^<\w+\-/,/>/,!0],[new RegExp("^</?("+p.join("|")+")(?=(\\s|/?>|$))","i"),/^$/,!0],[/^<([a-z]+[a-z|0-9|-]*)[\w|-|\s]*?>/,/___DO NOT FIND__/,!0],[/^<([A-Z]+[a-z|A-Z|0-9]*)[\w|-|\s]*?>/,/___DO NOT FIND__/,!0],[new RegExp(d.source+"\\s*$"),/^$/,!1]],f=r("v-press-plus:start-block");let h=r("v-press-plus:htmlBlock");const k=(...e)=>(e&&e.length>0?(e=e.map((e=>function(e){const[t,n,s,o]=/^(\s*)(.*?)(\s*)$/.exec(e);return`${n}${(e=>e.replace(/_/g,"-"))((e=>e.replace(/-$/s,""))((e=>e.replace(/^-/s,""))((e=>e.replace(/-+/g,"-"))((e=>e.replace(/\s/gs,"-"))((r=s,r.replace(/[A-Z]/g,(e=>`-${e[0].toLowerCase()}`))))))))}${o}`;var r}(e))),h("the following VueJS components will be treated as BLOCK elements: ",e)):h('no VueJS components were registered to be treated as BLOCK elements; you may add the "md-block" property to a component to make it become a block element.'),(t,n,s,o)=>{let r,l,a,d=t.bMarks[n]+t.tShift[n],k=t.eMarks[n];const $=t.src.slice(d);if(a=t.src.slice(d,k),h("evaluating",{src:t.src.slice(d,k),pos:d,max:k}),m.test($))return h("returning false for bare end tag:",$),!1;if(!t.md.options.html)return h("returning false due to markdown options",$),!1;if(60!==t.src.charCodeAt(d))return h('returning false as block doesn\'t start with "<": ',a),!1;if(t.sCount[n]-t.blkIndent>=4)return h(`- returning false due to indentation [ ${t.sCount[n]}, ${t.blkIndent} ]; if it's indented more than 3 spaces, it should be a code block.`),!1;const b=function(e,t=[]){const n=/\s*(\w+)="(.*?)"/gs,s=[...e.matchAll(/^<([a-z|0-9|-]+)([^\0]*?)>([^\0]*?)(<\/\1[^\0]*?>)/gs)].reduce(((e,s)=>{const o=s[1],r=s[2].replace(/\s*[\w:]+?=".*?"/g,"").split(/\s+/).filter((e=>e)).map((e=>["flag",e,void 0])),l=[...s[2].matchAll(n),...r].reduce(((e,t)=>{const[,n,s]=t;return n&&(e[n]=void 0===s?"":s),e}),{}),i={tag:o,tagProps:l,isMdBlock:Object.keys(l).includes("md-block")||t.includes(o),isMdSlot:"template"===o&&Object.keys(l).includes("md-slot"),interior:s[3],closure:s[4]};return e.push(i),e}),[]);return s.length>1&&(console.warn(`the blockMeta function returned more than one block [${s.length}], it should not.`),u(`blockMeta ended with ${s.length} blocks instead of the expected 1:`,{blocks:s})),s[0]}($,e);if(b){if(h(`processing "${b.tag}":\n${JSON.stringify(b,null,2)}`),[...e,...p].includes(b.tag)||b.isMdBlock){const e=function(e,t,n){let s=!1;return n+t.split("\n").reduce(((t,n)=>(n.includes(e)||s?s=!0:t.push(n),t)),[]).length+1}(b.closure,$,n);return h(`${b.tag} is a BLOCK element [ ${n}, ${e} ]`),b.interior.includes("md-slot")?c(t,b,$,n,e):i(t,n,e)}return h(`- ${b.tag} is an INLINE element [ ${n}, ${s} ] so returning false to prevent block rule`),!1}if(h("processing unknown [no meta]: ",$),!function(e,t){let n;for(n=0;n<g.length;n++)if(g[n][0].test(e))return f(`${g[n][0].toString()} passed with ${e}`),!0;return!t||g[n][2]}(a,o))return!1;for(r=0;r<g.length&&!g[r][0].test(a);r++);if(r===g.length)return!1;if(o)return g[r][2];if(l=n+1,!g[r][1].test(a))for(;l<s&&!(t.sCount[l]<t.blkIndent);l++)if(d=t.bMarks[l]+t.tShift[l],k=t.eMarks[l],a=t.src.slice(d,k),g[r][1].test(a)){0!==a.length&&(h(`skipping a line as line text empty in "${b.tag}"`),l++);break}return h(`adding token to "${b?b.tag:$}" [ ${n} -> ${l} ], ending: ${a} ]`),i(t,n,l),!0});module.exports=(e={components:[]})=>{console.error("registering vuepress PLUGIN",e);const t=k();return{name:"v-press-plus",extendMarkdown:e=>{e.block.ruler.at("html_block",t)}}};
